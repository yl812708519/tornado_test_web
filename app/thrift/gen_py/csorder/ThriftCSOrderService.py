#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def get_for_workbench(self, csuser_id, order_id, treat_type, offset, count):
    """
    Parameters:
     - csuser_id
     - order_id
     - treat_type
     - offset
     - count
    """
    pass

  def count_for_workbench(self, csuser_id, order_id, treat_type):
    """
    Parameters:
     - csuser_id
     - order_id
     - treat_type
    """
    pass

  def is_csuser_allowed(self, csuser_id, order_id, treat_type):
    """
    Parameters:
     - csuser_id
     - order_id
     - treat_type
    """
    pass

  def handle_csorder(self, order_id, treat_type, stuff_id, next_status):
    """
    Parameters:
     - order_id
     - treat_type
     - stuff_id
     - next_status
    """
    pass

  def offline_payment(self, order_id, order_type, is_invoice, payment_json):
    """
    Parameters:
     - order_id
     - order_type
     - is_invoice
     - payment_json
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def get_for_workbench(self, csuser_id, order_id, treat_type, offset, count):
    """
    Parameters:
     - csuser_id
     - order_id
     - treat_type
     - offset
     - count
    """
    self.send_get_for_workbench(csuser_id, order_id, treat_type, offset, count)
    return self.recv_get_for_workbench()

  def send_get_for_workbench(self, csuser_id, order_id, treat_type, offset, count):
    self._oprot.writeMessageBegin('get_for_workbench', TMessageType.CALL, self._seqid)
    args = get_for_workbench_args()
    args.csuser_id = csuser_id
    args.order_id = order_id
    args.treat_type = treat_type
    args.offset = offset
    args.count = count
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_for_workbench(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_for_workbench_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.se is not None:
      raise result.se
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_for_workbench failed: unknown result");

  def count_for_workbench(self, csuser_id, order_id, treat_type):
    """
    Parameters:
     - csuser_id
     - order_id
     - treat_type
    """
    self.send_count_for_workbench(csuser_id, order_id, treat_type)
    return self.recv_count_for_workbench()

  def send_count_for_workbench(self, csuser_id, order_id, treat_type):
    self._oprot.writeMessageBegin('count_for_workbench', TMessageType.CALL, self._seqid)
    args = count_for_workbench_args()
    args.csuser_id = csuser_id
    args.order_id = order_id
    args.treat_type = treat_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_count_for_workbench(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = count_for_workbench_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.se is not None:
      raise result.se
    raise TApplicationException(TApplicationException.MISSING_RESULT, "count_for_workbench failed: unknown result");

  def is_csuser_allowed(self, csuser_id, order_id, treat_type):
    """
    Parameters:
     - csuser_id
     - order_id
     - treat_type
    """
    self.send_is_csuser_allowed(csuser_id, order_id, treat_type)
    return self.recv_is_csuser_allowed()

  def send_is_csuser_allowed(self, csuser_id, order_id, treat_type):
    self._oprot.writeMessageBegin('is_csuser_allowed', TMessageType.CALL, self._seqid)
    args = is_csuser_allowed_args()
    args.csuser_id = csuser_id
    args.order_id = order_id
    args.treat_type = treat_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_is_csuser_allowed(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = is_csuser_allowed_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.se is not None:
      raise result.se
    raise TApplicationException(TApplicationException.MISSING_RESULT, "is_csuser_allowed failed: unknown result");

  def handle_csorder(self, order_id, treat_type, stuff_id, next_status):
    """
    Parameters:
     - order_id
     - treat_type
     - stuff_id
     - next_status
    """
    self.send_handle_csorder(order_id, treat_type, stuff_id, next_status)
    return self.recv_handle_csorder()

  def send_handle_csorder(self, order_id, treat_type, stuff_id, next_status):
    self._oprot.writeMessageBegin('handle_csorder', TMessageType.CALL, self._seqid)
    args = handle_csorder_args()
    args.order_id = order_id
    args.treat_type = treat_type
    args.stuff_id = stuff_id
    args.next_status = next_status
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_handle_csorder(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = handle_csorder_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.se is not None:
      raise result.se
    raise TApplicationException(TApplicationException.MISSING_RESULT, "handle_csorder failed: unknown result");

  def offline_payment(self, order_id, order_type, is_invoice, payment_json):
    """
    Parameters:
     - order_id
     - order_type
     - is_invoice
     - payment_json
    """
    self.send_offline_payment(order_id, order_type, is_invoice, payment_json)
    return self.recv_offline_payment()

  def send_offline_payment(self, order_id, order_type, is_invoice, payment_json):
    self._oprot.writeMessageBegin('offline_payment', TMessageType.CALL, self._seqid)
    args = offline_payment_args()
    args.order_id = order_id
    args.order_type = order_type
    args.is_invoice = is_invoice
    args.payment_json = payment_json
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_offline_payment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = offline_payment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.se is not None:
      raise result.se
    raise TApplicationException(TApplicationException.MISSING_RESULT, "offline_payment failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["get_for_workbench"] = Processor.process_get_for_workbench
    self._processMap["count_for_workbench"] = Processor.process_count_for_workbench
    self._processMap["is_csuser_allowed"] = Processor.process_is_csuser_allowed
    self._processMap["handle_csorder"] = Processor.process_handle_csorder
    self._processMap["offline_payment"] = Processor.process_offline_payment

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_get_for_workbench(self, seqid, iprot, oprot):
    args = get_for_workbench_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_for_workbench_result()
    try:
      result.success = self._handler.get_for_workbench(args.csuser_id, args.order_id, args.treat_type, args.offset, args.count)
    except Extest as se:
      result.se = se
    oprot.writeMessageBegin("get_for_workbench", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_count_for_workbench(self, seqid, iprot, oprot):
    args = count_for_workbench_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = count_for_workbench_result()
    try:
      result.success = self._handler.count_for_workbench(args.csuser_id, args.order_id, args.treat_type)
    except Extest as se:
      result.se = se
    oprot.writeMessageBegin("count_for_workbench", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_is_csuser_allowed(self, seqid, iprot, oprot):
    args = is_csuser_allowed_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = is_csuser_allowed_result()
    try:
      result.success = self._handler.is_csuser_allowed(args.csuser_id, args.order_id, args.treat_type)
    except Extest as se:
      result.se = se
    oprot.writeMessageBegin("is_csuser_allowed", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_handle_csorder(self, seqid, iprot, oprot):
    args = handle_csorder_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = handle_csorder_result()
    try:
      result.success = self._handler.handle_csorder(args.order_id, args.treat_type, args.stuff_id, args.next_status)
    except Extest as se:
      result.se = se
    oprot.writeMessageBegin("handle_csorder", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_offline_payment(self, seqid, iprot, oprot):
    args = offline_payment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = offline_payment_result()
    try:
      result.success = self._handler.offline_payment(args.order_id, args.order_type, args.is_invoice, args.payment_json)
    except Extest as se:
      result.se = se
    oprot.writeMessageBegin("offline_payment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_for_workbench_args:
  """
  Attributes:
   - csuser_id
   - order_id
   - treat_type
   - offset
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'csuser_id', None, None, ), # 1
    (2, TType.STRING, 'order_id', None, None, ), # 2
    (3, TType.STRING, 'treat_type', None, None, ), # 3
    (4, TType.I32, 'offset', None, None, ), # 4
    (5, TType.I32, 'count', None, None, ), # 5
  )

  def __init__(self, csuser_id=None, order_id=None, treat_type=None, offset=None, count=None,):
    self.csuser_id = csuser_id
    self.order_id = order_id
    self.treat_type = treat_type
    self.offset = offset
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.csuser_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.treat_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_for_workbench_args')
    if self.csuser_id is not None:
      oprot.writeFieldBegin('csuser_id', TType.I64, 1)
      oprot.writeI64(self.csuser_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 2)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    if self.treat_type is not None:
      oprot.writeFieldBegin('treat_type', TType.STRING, 3)
      oprot.writeString(self.treat_type)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 4)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_for_workbench_result:
  """
  Attributes:
   - success
   - se
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'se', (Extest, Extest.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, se=None,):
    self.success = success
    self.se = se

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.se = Extest()
          self.se.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_for_workbench_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.se is not None:
      oprot.writeFieldBegin('se', TType.STRUCT, 1)
      self.se.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_for_workbench_args:
  """
  Attributes:
   - csuser_id
   - order_id
   - treat_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'csuser_id', None, None, ), # 1
    (2, TType.STRING, 'order_id', None, None, ), # 2
    (3, TType.STRING, 'treat_type', None, None, ), # 3
  )

  def __init__(self, csuser_id=None, order_id=None, treat_type=None,):
    self.csuser_id = csuser_id
    self.order_id = order_id
    self.treat_type = treat_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.csuser_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.order_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.treat_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_for_workbench_args')
    if self.csuser_id is not None:
      oprot.writeFieldBegin('csuser_id', TType.I64, 1)
      oprot.writeI64(self.csuser_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 2)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    if self.treat_type is not None:
      oprot.writeFieldBegin('treat_type', TType.STRING, 3)
      oprot.writeString(self.treat_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_for_workbench_result:
  """
  Attributes:
   - success
   - se
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'se', (Extest, Extest.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, se=None,):
    self.success = success
    self.se = se

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.se = Extest()
          self.se.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_for_workbench_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.se is not None:
      oprot.writeFieldBegin('se', TType.STRUCT, 1)
      self.se.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_csuser_allowed_args:
  """
  Attributes:
   - csuser_id
   - order_id
   - treat_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'csuser_id', None, None, ), # 1
    (2, TType.I64, 'order_id', None, None, ), # 2
    (3, TType.STRING, 'treat_type', None, None, ), # 3
  )

  def __init__(self, csuser_id=None, order_id=None, treat_type=None,):
    self.csuser_id = csuser_id
    self.order_id = order_id
    self.treat_type = treat_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.csuser_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.order_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.treat_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_csuser_allowed_args')
    if self.csuser_id is not None:
      oprot.writeFieldBegin('csuser_id', TType.I64, 1)
      oprot.writeI64(self.csuser_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 2)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.treat_type is not None:
      oprot.writeFieldBegin('treat_type', TType.STRING, 3)
      oprot.writeString(self.treat_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_csuser_allowed_result:
  """
  Attributes:
   - success
   - se
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'se', (Extest, Extest.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, se=None,):
    self.success = success
    self.se = se

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.se = Extest()
          self.se.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_csuser_allowed_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.se is not None:
      oprot.writeFieldBegin('se', TType.STRUCT, 1)
      self.se.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handle_csorder_args:
  """
  Attributes:
   - order_id
   - treat_type
   - stuff_id
   - next_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.STRING, 'treat_type', None, None, ), # 2
    (3, TType.I64, 'stuff_id', None, None, ), # 3
    (4, TType.STRING, 'next_status', None, None, ), # 4
  )

  def __init__(self, order_id=None, treat_type=None, stuff_id=None, next_status=None,):
    self.order_id = order_id
    self.treat_type = treat_type
    self.stuff_id = stuff_id
    self.next_status = next_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.treat_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.stuff_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.next_status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handle_csorder_args')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.treat_type is not None:
      oprot.writeFieldBegin('treat_type', TType.STRING, 2)
      oprot.writeString(self.treat_type)
      oprot.writeFieldEnd()
    if self.stuff_id is not None:
      oprot.writeFieldBegin('stuff_id', TType.I64, 3)
      oprot.writeI64(self.stuff_id)
      oprot.writeFieldEnd()
    if self.next_status is not None:
      oprot.writeFieldBegin('next_status', TType.STRING, 4)
      oprot.writeString(self.next_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handle_csorder_result:
  """
  Attributes:
   - success
   - se
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'se', (Extest, Extest.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, se=None,):
    self.success = success
    self.se = se

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.se = Extest()
          self.se.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handle_csorder_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.se is not None:
      oprot.writeFieldBegin('se', TType.STRUCT, 1)
      self.se.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class offline_payment_args:
  """
  Attributes:
   - order_id
   - order_type
   - is_invoice
   - payment_json
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.STRING, 'order_type', None, None, ), # 2
    (3, TType.BOOL, 'is_invoice', None, None, ), # 3
    (4, TType.STRING, 'payment_json', None, None, ), # 4
  )

  def __init__(self, order_id=None, order_type=None, is_invoice=None, payment_json=None,):
    self.order_id = order_id
    self.order_type = order_type
    self.is_invoice = is_invoice
    self.payment_json = payment_json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.order_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_invoice = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.payment_json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('offline_payment_args')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.order_type is not None:
      oprot.writeFieldBegin('order_type', TType.STRING, 2)
      oprot.writeString(self.order_type)
      oprot.writeFieldEnd()
    if self.is_invoice is not None:
      oprot.writeFieldBegin('is_invoice', TType.BOOL, 3)
      oprot.writeBool(self.is_invoice)
      oprot.writeFieldEnd()
    if self.payment_json is not None:
      oprot.writeFieldBegin('payment_json', TType.STRING, 4)
      oprot.writeString(self.payment_json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class offline_payment_result:
  """
  Attributes:
   - success
   - se
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'se', (Extest, Extest.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, se=None,):
    self.success = success
    self.se = se

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.se = Extest()
          self.se.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('offline_payment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.se is not None:
      oprot.writeFieldBegin('se', TType.STRUCT, 1)
      self.se.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
